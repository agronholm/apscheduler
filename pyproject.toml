[build-system]
requires = [
    "setuptools >= 64",
    "setuptools_scm >= 6.4"
]
build-backend = "setuptools.build_meta"

[project]
name = "APScheduler"
description = "In-process task scheduler with Cron-like capabilities"
readme = "README.rst"
authors = [{name = "Alex GrÃ¶nholm", email = "alex.gronholm@nextday.fi"}]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
keywords = ["scheduling", "cron"]
license = {text = "MIT"}
requires-python = ">= 3.8"
dependencies = [
    "anyio ~= 4.0",
    "attrs >= 21.3",
    "tenacity ~= 8.0",
    "tzlocal >= 3.0",
    "typing_extensions >= 4.0; python_version < '3.11'"
]
dynamic = ["version"]

[project.urls]
Documentation = "https://apscheduler.readthedocs.io/en/master/"
Changelog = "https://apscheduler.readthedocs.io/en/master/versionhistory.html"
"Source code" = "https://github.com/agronholm/apscheduler"
"Issue tracker" = "https://github.com/agronholm/apscheduler/issues"

[project.optional-dependencies]
asyncpg = ["asyncpg >= 0.20"]
cbor = ["cbor2 >= 5.0"]
mongodb = ["pymongo >= 4"]
mqtt = ["paho-mqtt >= 1.5"]
redis = ["redis >= 4.4.0"]
sqlalchemy = ["sqlalchemy >= 2.0.19"]
test = [
    "APScheduler[cbor,mongodb,mqtt,redis,sqlalchemy]",
    "asyncpg >= 0.20; python_implementation == 'CPython'",
    "aiosqlite >= 0.19",
    "anyio[trio]",
    "asyncmy >= 0.2.5; python_implementation == 'CPython'",
    "coverage >= 7",
    "freezegun",
    "paho-mqtt >= 1.5",
    "psycopg",
    "pymongo >= 4",
    "pymysql[rsa]",
    "PySide6 >= 6.6; python_implementation == 'CPython'",
    "pytest >= 7.4.0",
    "pytest-freezer",
    "pytest-lazy-fixture",
    "pytest-mock",
    "uwsgi; python_implementation == 'CPython' and platform_system == 'Linux'",
]
doc = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-rtd-theme >= 1.3.0",
    "sphinx-tabs >= 3.3.1",
]

[tool.setuptools_scm]
version_scheme = "post-release"
local_scheme = "dirty-tag"

[tool.pytest.ini_options]
addopts = "-rsx --tb=short"
testpaths = "tests"
filterwarnings = "always"
markers = [
    "external_service: marks tests as requiring some external service",
]

[tool.coverage.run]
source = ["apscheduler"]

[tool.coverage.report]
show_missing = true

[tool.ruff]
select = [
    "ASYNC",        # flake8-async
    "E", "F", "W",  # default Flake8
    "G",            # flake8-logging-format
    "I",            # isort
    "ISC",          # flake8-implicit-str-concat
    "PGH",          # pygrep-hooks
    "RUF100",       # unused noqa (yesqa)
    "UP",           # pyupgrade
]
src = ["src"]

[tool.ruff.isort]
"required-imports" = ["from __future__ import annotations"]

[tool.mypy]
python_version = "3.10"
ignore_missing_imports = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312, pypy3
skip_missing_interpreters = true
minversion = 4.0

[testenv]
extras = test
package = editable
commands = coverage run -m pytest {posargs}

[testenv:pypy3]
commands = pytest {posargs}

[testenv:pyright]
deps = pyright
commands = pyright --verifytypes apscheduler

[testenv:docs]
extras = doc
commands = sphinx-build -n docs build/sphinx
"""
